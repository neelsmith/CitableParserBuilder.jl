var documenterSearchIndex = {"docs":
[{"location":"guide/parser/#Users'-guide:-using-a-CitableParser","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"","category":"section"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"Any implementation of a CitableParser works in basically the same way.  The parsing functions all have a common pair of signatures:","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"function(parser, content)\nfunction(parser, content, parserdata)","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"The sample parser we will use requires the third, data parameter: check the documentation for your specific parser to see how it works.","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"Here we instantiate the sample parser, and verify that it is indeed a subtype of CitableParser.","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"using CitableParserBuilder\nparser = CitableParserBuilder.gettysburgParser()\ntypeof(parser) |> supertype\n\n# output\n\nCitableParser","category":"page"},{"location":"guide/parser/#Parsing-string-values","page":"Users' guide: using a CitableParser","title":"Parsing string values","text":"","category":"section"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"When we parse a string token, the result is a Vector of Analysis objects. Our parser produces only one analysis for score.","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"scoreparses = parsetoken(parser, \"score\", parser.data)\nlength(scoreparses)\n\n# output\n\n1","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"typeof(scoreparses[1])\n\n# output\n\nAnalysis","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"The analysis object associates with the token a URN value, in abbreviated format, for each of the four properties of an analysis.","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"scoreparses[1].token\n\n# output\n\n\"score\"","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"scoreparses[1].form\n\n# output\n\ngburgform.NN","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"NN is the Penn Tree Bank code for Noun, singular or mass.","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"We can also parse a list of words. Here, parsing four words produces a Vector containing four Vectors of Analysis objects.","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"wordsparsed = parsewordlist(parser, split(\"Four score and seven\"), parser.data)\nlength(wordsparsed)\n\n# output\n\n4","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"tip: Tip\nYou can use an OrthographicSystem to create generate a list of unique lexical tokens for an entire citable corpus. See the documentation for the Orthography module.","category":"page"},{"location":"guide/parser/#Parsing-citable-text-content","page":"Users' guide: using a CitableParser","title":"Parsing citable text content","text":"","category":"section"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"You can also parse citable text structures: passages, documents and corpora.  Here we illustrate parsing a citable passage.","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"using CitableText, CitableCorpus\nurn = CtsUrn(\"urn:cts:demo:gburg.hays.v2:1.2\")\npsg = CitablePassage(urn, \"score\")\npsg_analysis = parsepassage(parser, psg, parser.data)\ntypeof(psg_analysis)\n\n# output\n\nAnalyzedToken","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"The result is a new kind of object, the AnalyzedToken, which associates a Vector of Analysis objects with a citable passage.","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"psg_analysis.passage\n\n# output\n\n<urn:cts:demo:gburg.hays.v2:1.2> score","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"psg_analysis.analyses == scoreparses\n\n# output\n\ntrue","category":"page"},{"location":"guide/parser/#Exporting-to-CEX-format","page":"Users' guide: using a CitableParser","title":"Exporting to CEX format","text":"","category":"section"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"When we export analyses to CEX format, we want to use full CITE2 URNs, rather than the abbreviated URNs of the Analysis structure.  You need a dictionary mapping collection names to full CITE2 URN values for the collection.","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"registry = Dict(\n        \"gburglex\" => \"urn:cite2:citedemo:gburglex.v1:\",\n        \"gburgform\" => \"urn:cite2:citedemo:gburgform.v1:\",\n        \"gburgrule\" => \"urn:cite2:citedemo:gburgrule.v1:\",\n        \"gburgstem\" => \"urn:cite2:citedemo:gburgstem.v1:\"\n    )\nlength(registry)\n\n# output\n\n4","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"Include the dictionary along with your list of analyses as parameters to the cex function to expand abbreviated URNs to their full form.  You can use normal Julia IO to write the results to a file, for example.","category":"page"},{"location":"guide/parser/","page":"Users' guide: using a CitableParser","title":"Users' guide: using a CitableParser","text":"cex_output = cex(psg_analysis, registry = registry)\nopen(\"outfile.cex\", \"w\") do io\n    write(io, cex_output)\nend\n\n# output\n\n186","category":"page"},{"location":"guide/gburg/#Appendix:-a-note-on-the-citable-parser","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"","category":"section"},{"location":"guide/gburg/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"The GettysburgParser used in this demonstration works with a simple dictionary of tokens to POS tags.  The dictionary was constructed by wrapping the Python NLTK POS tagger with a Julia function. This page documents how to do that so that you can generically apply the NTLK tagger to a list of tokens from Julia.","category":"page"},{"location":"guide/gburg/#Python-prerequisites","page":"Appendix: a note on the citable parser","title":"Python prerequisites","text":"","category":"section"},{"location":"guide/gburg/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"You need to have Python, with nltk.","category":"page"},{"location":"guide/gburg/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"pip install nltk","category":"page"},{"location":"guide/gburg/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"Then start python, and at the python prompt,","category":"page"},{"location":"guide/gburg/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"import nltk\nnltk.download","category":"page"},{"location":"guide/gburg/#A-Julia-wrapper","page":"Appendix: a note on the citable parser","title":"A Julia wrapper","text":"","category":"section"},{"location":"guide/gburg/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"# If you're in a system with python accessible\n# and the nltk module installed, you can actually\n# execute all the code blocks on this page.\nrepo = pwd() |> dirname  |> dirname |> dirname\ngburgfile = repo * \"/test/data/gettysburg/gettysburgcorpus.cex\"\nusing CitableCorpus\ncorpus = corpus_fromfile(gburgfile, \"|\")","category":"page"},{"location":"guide/gburg/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"note: Note\nIn the extra directory, the script engpos.jl does everything documented here, and can be run from the command line from the root of the repository with julia --project=extra/ extra/engpos.jl","category":"page"},{"location":"guide/gburg/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"In Julia, you can make the NLTK module's tag function available like this:","category":"page"},{"location":"guide/gburg/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"using Conda\nConda.add(\"nltk\")\nusing PyCall\n@pyimport nltk.tag as ptag","category":"page"},{"location":"guide/gburg/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"Now if we have a citable corpus named corpus, we can use the TextAnalysis functions to extract a unique lexicon, and apply the NLTK tagger to it.","category":"page"},{"location":"guide/gburg/","page":"Appendix: a note on the citable parser","title":"Appendix: a note on the citable parser","text":"using CitableCorpusAnalysis\nusing TextAnalysis\ntacorp = tacorpus(corpus)\n\ntkns = []\nfor doc in tacorp.documents\n    push!(tkns, tokens(doc))\nend\ntknlist = tkns |> Iterators.flatten |> collect |> unique\ntagged = ptag.pos_tag(tknlist)","category":"page"},{"location":"guide/parsers/#Examples-of-CitableParsers","page":"Examples of CitableParsers","title":"Examples of CitableParsers","text":"","category":"section"},{"location":"guide/parsers/","page":"Examples of CitableParsers","title":"Examples of CitableParsers","text":"The following Julia modules implement the CitableParser abstraction:","category":"page"},{"location":"guide/parsers/","page":"Examples of CitableParsers","title":"Examples of CitableParsers","text":"Kanones: ancient Greek. Github.\nTabulae: Latin. Docs. Github.\nLycian: Lycian. Docs.Github.","category":"page"},{"location":"guide/abbrurns/#Abbreviated-URN-values","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"","category":"section"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"The AbbreviatedUrn is an abstract type supporting an abbreviated notation for Cite2Urns. It allows you to work with objects uniquely identified by collection identifier and object identifier, when the collection is registered in a dictionary that can expand the collection identifier to a full Cite2Urn.","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"The modules implements the AbbrevatedUrn for each uniquely identified component of an Analysis:","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"LexemeUrn\nFormUrn\nStemUrn\nRuleUrn","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"An AbbreviatedUrn has a collection identifier, and an object identifier.  You can construct an AbbreviatedUrn from a dot-delimited string.","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"using CitableParserBuilder\nlexurn = LexemeUrn(\"lsj.n125\")\nlexurn.collection\n\n# output\n\n\"lsj\"","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"lexurn.objectid\n\n# output\n\n\"n125\"","category":"page"},{"location":"guide/abbrurns/#Abbreviated-URNs-and-Cite2Urns","page":"Abbreviated URN values","title":"Abbreviated URNs and Cite2Urns","text":"","category":"section"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"You can use the abbreviate function to create an abbreviation string from a Cite2Urn using the collection identifier and the object identifer of the Cite2Urn.","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"using CitableParserBuilder, CitableObject\nconjunctionurn = Cite2Urn(\"urn:cite2:kanones:morphforms.v1:1000000001\")\nabbreviate(conjunctionurn)\n\n# output\n\n\"morphforms.1000000001\"","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"Of course you can use this string in turn to instantiate an AbbreviatedUrn structure.","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"formurn = abbreviate(conjunctionurn) |> FormUrn\ntypeof(formurn)\n\n# output\n\nFormUrn","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"formurn.objectid\n\n# output\n\n\"1000000001\"","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"To convert an AbbreviatedUrn to a full Cite2Urn, give the expand function a dictionary mapping collection identifiers to full URN strings for the collection","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"registry = Dict(\n    \"morphforms\" => \"urn:cite2:kanones:morphforms.v1:\"\n)\nexpanded = expand(formurn, registry)\ntypeof(expanded)\n\n# output\n\nCite2Urn","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"expanded.urn\n\n# output\n\n\"urn:cite2:kanones:morphforms.v1:1000000001\"","category":"page"},{"location":"guide/abbrurns/#Abbreviated-URNs-and-SFST-PL","page":"Abbreviated URN values","title":"Abbreviated URNs and SFST-PL","text":"","category":"section"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"The fstsafe function composes an expression in SFST-PL for AbbrevatiedUrns.  It assumes that your SFST alphabet includes tokens <u> and </u> to mark beginning and ending boundaries of URN values. It escapes characters that are valid in URNs but reserved in the Stuttgart FST toolkit.  ","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"rule = RuleUrn(\"nouninfl.h_hs1\")\nfst = fstsafe(rule)\n\n# output\n\n\"<u>nouninfl\\\\.h\\\\_hs1</u>\"","category":"page"},{"location":"guide/abbrurns/","page":"Abbreviated URN values","title":"Abbreviated URN values","text":"","category":"page"},{"location":"guide/utils/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"guide/utils/#SFST-utilities","page":"Utilities","title":"SFST utilities","text":"","category":"section"},{"location":"guide/utils/","page":"Utilities","title":"Utilities","text":"Kanones and Tabulae are Julia packages for building ancient Greek and Latin morphological parsers, respectively.  Both Kanones and Tabulae do their parsing behind the scenes using finite state transducers built with the Stuttgart Finite State Transducer toolkit.  To facilitate this work, CitableParserBuilder includes utilities for transcoding string values to and from URN values and expressions in SFST-PL, the programmning language of the Stuttgart Finite State Transducer tooolkit.","category":"page"},{"location":"#CitableParserBuilder:-overview","page":"Overview","title":"CitableParserBuilder:  overview","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The CitableParserBuilder module offers common functions and data structures for working with citable morphological analyses of citable texts.  ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"At the center of the module are the abstract CitableParser, and the concrete Analysis and AnalyzedToken types. ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Parsing functions use a CitableParser to operate either on string values for individual tokens, or on passages of text citable with CTS URNs at the token level.  This harmonizes nicely with the Orthography module's functions for tokenizing strings and citable text structures.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Parsing a string value returns a (possibly empty) list of Analysis objects.  Parsing a citable passage returns an AnalyzedToken, which pairs the citable passage with the analyses resulting from parsing the passage's text content.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"tip: Tip\nYou can use an OrthographicSystem to create a complete tokenized edition from a citable edition. See the documentation for the Orthography module.","category":"page"},{"location":"#Shared-functions-for-parsing:-the-CitableParser-abstraction","page":"Overview","title":"Shared functions for parsing: the CitableParser abstraction","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Types implementing the CitableParser abstraction must have a member function named stringparser(tkn::AbstractString) that returns a list of Analysis objects.  That makes possible a parsetoken function with the following signature:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"parsetoken(p::T, t::AbstractString) where {T <: CitableParser}","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"parsetoken simply invokes p.stringparser(t) to parse the string value for a single token.  With this in place, the CitableParserBuilder can include concrete implementations of the following functions:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"parsetoken: parse a string value\nparsewordlist: parse a list of string values\nparselistfromfile: parse a list of string values in a local file\nparselistfromurl: parse a list of string values from the contents of a URL\nparsepassage: parse the text component of a CitablePassage as a single token\nparsecorpus: parse the text components of all nodes in a CitableCorpus as individual tokens","category":"page"},{"location":"#Shared-structures:-the-Analysis-and-the-AnalyzedToken","page":"Overview","title":"Shared structures: the Analysis and the AnalyzedToken","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Every analysis of a string value identifies a valid pairing of a lexeme and a form for the token.  The Analysis further supports a typical model of computational morphological analysis that crosses a lexicon of stems with a set of inflectional patterns to create a comprehensive set of recognized forms. The stem and rule of an Analysis explain how the analysis' lexeme and form were arrived at.  The structure of the Analysis therefore consists of four URN values:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"the lexeme\nthe morphological form\nthe stem used to arrive at the analysis\nthe inflectional rule used to arrive at the analysis","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The AnalyzedToken type associates a Vector of Analysis objects with a citable token.","category":"page"},{"location":"#Examples","page":"Overview","title":"Examples","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The following sections illustrate parsing with a sample implementation of a CitableParser designed to parse a corpus of all the known versions of Lincoln's Gettysburg Address, and to identify the form of tokens with the part of speech code used by the Penn treebank project.","category":"page"},{"location":"#Contents","page":"Overview","title":"Contents","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Pages = [\n    \"guide/parser.md\",\n    \"guide/analyses.md\",\n    \"guide/abbrurns.md\",\n    \"guide/utils.md\",\n    \"guide/parsers.md\",\n    \"guide/gburg.md\",\n    \"man/index.md\"\n]","category":"page"},{"location":"man/#API-documentation","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"man/#Structures","page":"API documentation","title":"Structures","text":"","category":"section"},{"location":"man/","page":"API documentation","title":"API documentation","text":"AbbreviatedUrn\nStem\nRule\nAnalysis\nStemUrn\nRuleUrn\nLexemeUrn\nFormUrn\nAnalyzedToken","category":"page"},{"location":"man/#CitableParserBuilder.AbbreviatedUrn","page":"API documentation","title":"CitableParserBuilder.AbbreviatedUrn","text":"Short form of a Cite2Urn containing only collection and object ID.\n\n\n\n\n\n","category":"type"},{"location":"man/#CitableParserBuilder.Stem","page":"API documentation","title":"CitableParserBuilder.Stem","text":"Supertype of all concrete Stem structures.\n\n\n\n\n\n","category":"type"},{"location":"man/#CitableParserBuilder.Rule","page":"API documentation","title":"CitableParserBuilder.Rule","text":"Supertype of all concrete Rule structures.\n\n\n\n\n\n","category":"type"},{"location":"man/#CitableParserBuilder.Analysis","page":"API documentation","title":"CitableParserBuilder.Analysis","text":"Citable analysis of a string value.\n\nAn Analysis has five members: a token string value, and four abbreviated URNs, one each for the lexeme, form, rule and stem.\n\n\n\n\n\n","category":"type"},{"location":"man/#CitableParserBuilder.StemUrn","page":"API documentation","title":"CitableParserBuilder.StemUrn","text":"Abbreviated URN for a morphological stem.\n\n\n\n\n\n","category":"type"},{"location":"man/#CitableParserBuilder.RuleUrn","page":"API documentation","title":"CitableParserBuilder.RuleUrn","text":"Abbreviated URN for rule.\n\n\n\n\n\n","category":"type"},{"location":"man/#CitableParserBuilder.LexemeUrn","page":"API documentation","title":"CitableParserBuilder.LexemeUrn","text":"Abbreviated URN for a lexeme.\n\n\n\n\n\n","category":"type"},{"location":"man/#CitableParserBuilder.FormUrn","page":"API documentation","title":"CitableParserBuilder.FormUrn","text":"Abbreviated URN for a morphological form.\n\n\n\n\n\n","category":"type"},{"location":"man/#CitableParserBuilder.AnalyzedToken","page":"API documentation","title":"CitableParserBuilder.AnalyzedToken","text":"Morphological analyses for a token identified by CTS URN.\n\n\n\n\n\n","category":"type"},{"location":"man/#Parsing","page":"API documentation","title":"Parsing","text":"","category":"section"},{"location":"man/","page":"API documentation","title":"API documentation","text":"parsetoken\nparsewordlist\nparselistfromfile\nparselistfromurl\nparsepassage\nparsecorpus","category":"page"},{"location":"man/#CitableParserBuilder.parsetoken","page":"API documentation","title":"CitableParserBuilder.parsetoken","text":"Required function to parse a single token with a CitableParser.\n\nparsetoken(p, t)\nparsetoken(p, t, data)\n\n\nShould return a (possibly empty) Vector of Analyses.\n\n\n\n\n\n","category":"function"},{"location":"man/#CitableParserBuilder.parsewordlist","page":"API documentation","title":"CitableParserBuilder.parsewordlist","text":"Parse a list of tokens with a CitableParser.\n\nparsewordlist(p, vocablist)\nparsewordlist(p, vocablist, data)\n\n\nShould return a (possibly empty) Vector of Vectors Analysis objects. Each outer Vector corresponds to one vocabulary item.\n\n\n\n\n\n","category":"function"},{"location":"man/#CitableParserBuilder.parselistfromfile","page":"API documentation","title":"CitableParserBuilder.parselistfromfile","text":"Parse a list of tokens in a file with a CitableParser.\n\nparselistfromfile(p, f)\nparselistfromfile(p, f, delim)\nparselistfromfile(p, f, delim, data)\n\n\nShould return pairings of tokens with a (possibly empty) Vector of Analyses.\n\n\n\n\n\n","category":"function"},{"location":"man/#CitableParserBuilder.parselistfromurl","page":"API documentation","title":"CitableParserBuilder.parselistfromurl","text":"Parse a list of tokens at a given url with a CitableParser.\n\nShould return pairings of tokens with a (possibly empty) Vector of Analyses.\n\n\n\n\n\n","category":"function"},{"location":"man/#CitableParserBuilder.parsepassage","page":"API documentation","title":"CitableParserBuilder.parsepassage","text":"Parse a CitablePassage with text for a single token with a CitableParser.\n\nparsepassage(p, cn)\nparsepassage(p, cn, data)\n\n\nShould return an AnalyzedToken.\n\n\n\n\n\n","category":"function"},{"location":"man/#CitableParserBuilder.parsecorpus","page":"API documentation","title":"CitableParserBuilder.parsecorpus","text":"Use a CitableParser to parse a CitableTextCorpus with each citable node containing containg a single token.\n\nparsecorpus(p, c)\nparsecorpus(p, c, data)\n\n\nShould return a list of AnalyzedTokens.\n\n\n\n\n\n","category":"function"},{"location":"man/#Working-with-AbbreviatedUrns","page":"API documentation","title":"Working with AbbreviatedUrns","text":"","category":"section"},{"location":"man/","page":"API documentation","title":"API documentation","text":"abbreviate\nexpand\nfstsafe","category":"page"},{"location":"man/#CitableParserBuilder.abbreviate","page":"API documentation","title":"CitableParserBuilder.abbreviate","text":"Constructs an AbbreviatedUrn string from a Cite2Urn.\n\nabbreviate(urn)\n\n\nExample:\n\njulia> abbreviate(Cite2Urn(\"urn:cite2:kanones:lsj.v1:n123\"))\n\"lsj.n123\"\n\nExample: a pipeline abbreviating a Cite2Urn and forming a LexemeUrn from the abbreviated string value.\n\njulia> Cite2Urn(\"urn:cite2:kanones:lsj.v1:n123\") |> abbreviate |> LexemeUrn\nLexemeUrn(\"lsj\", \"n123\")\n\n\n\n\n\n","category":"function"},{"location":"man/#CitableParserBuilder.expand","page":"API documentation","title":"CitableParserBuilder.expand","text":"Constructs a Cite2Urn from an AbbreviatedUrn and a dictionary mapping collection identifiers in  AbbreviatedUrns's to full Cite2Urns for a versioned collection.\n\n\n\n\n\n","category":"function"},{"location":"man/#CitableParserBuilder.fstsafe","page":"API documentation","title":"CitableParserBuilder.fstsafe","text":"Compose SFST representation of an AbbreviatedUrn.\n\nfstsafe(au)\n\n\nExample:\n\njulia> LexemeUrn(\"lexicon.lex123\") |> fstsafe\n\"<u>lexicon\\.lex123</u>\"\n\n\n\n\n\n","category":"function"},{"location":"man/#Working-with-Stems-and-Rules","page":"API documentation","title":"Working with Stems and Rules","text":"","category":"section"},{"location":"man/","page":"API documentation","title":"API documentation","text":"CitableParserBuilder.lexeme\nCitableParserBuilder.id\nCitableParserBuilder.inflectiontype","category":"page"},{"location":"man/#CitableParserBuilder.lexeme","page":"API documentation","title":"CitableParserBuilder.lexeme","text":"Function required to get lexeme  value of a Stem implementation.\n\n\n\n\n\n","category":"function"},{"location":"man/#CitableParserBuilder.id","page":"API documentation","title":"CitableParserBuilder.id","text":"Function required to get ID value of a Stem implementation.\n\n\n\n\n\nFunction required to get ID value of a Rule implementation.\n\n\n\n\n\n","category":"function"},{"location":"man/#CitableParserBuilder.inflectiontype","page":"API documentation","title":"CitableParserBuilder.inflectiontype","text":"Function required to get string value for inflection class of a Stem implementation.\n\n\n\n\n\nFunction required to get string value for inflection class of a Rule implementation.\n\n\n\n\n\n","category":"function"},{"location":"man/#Serialization","page":"API documentation","title":"Serialization","text":"","category":"section"},{"location":"man/","page":"API documentation","title":"API documentation","text":"readfst\nanalyses_relationsblock","category":"page"},{"location":"man/#CitableParserBuilder.readfst","page":"API documentation","title":"CitableParserBuilder.readfst","text":"Read SFST output from file f, and parse into a dictionary keying tokens to a (possibly empty) array of SFST strings.\n\nreadfst(f)\n\n\n\n\n\n\n","category":"function"},{"location":"man/#CitableParserBuilder.analyses_relationsblock","page":"API documentation","title":"CitableParserBuilder.analyses_relationsblock","text":"Compose a CEX relationset block for a set of analyses.\n\nanalyses_relationsblock(urn, label, v)\nanalyses_relationsblock(urn, label, v, delim; registry)\n\n\n\n\n\n\n","category":"function"},{"location":"guide/analyses/#User's-guide:-working-with-analyses","page":"User's guide: working with analyses","title":"User's guide: working with analyses","text":"","category":"section"},{"location":"guide/analyses/","page":"User's guide: working with analyses","title":"User's guide: working with analyses","text":"The Analysis type represents the results of analyzing a string morphologically.","category":"page"},{"location":"guide/analyses/","page":"User's guide: working with analyses","title":"User's guide: working with analyses","text":"The AnalyzedToken type associates a Vector of Analysis objects with a citable token.","category":"page"},{"location":"guide/analyses/","page":"User's guide: working with analyses","title":"User's guide: working with analyses","text":"Notable points:","category":"page"},{"location":"guide/analyses/","page":"User's guide: working with analyses","title":"User's guide: working with analyses","text":"the AnalyzedToken should cite the text at the level of individual token, normally by expanding the citation hierarchy on level to identify tokens within a canonically citable unit\nthe Vector of analyses associated with an AnalyzedToken may be empty. This means that no analyis was found for the given token.\nthe string value for the token in an AnalyzedToken  represents the string as it appears in the cited text.  The string for the token in an Analysis represents the string that was analyzed.  These two values may or may not be identical.  If the token was normalized in some way before analysis (e.g., adjusting case or accent) they may differ.","category":"page"}]
}
