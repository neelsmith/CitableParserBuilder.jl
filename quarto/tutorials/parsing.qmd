---
title: "Parsing a string value"
---


First, create a `GettysburgParser` and assign it to a variable named `parser`.

```{julia}
#| warning: false
#| output: false
#| code-fold: true
#| code-summary: "Instantiate a parser"

using CitableParserBuilder
parser = CitableParserBuilder.gettysburgParser()
```

When we parse a string token, the result is a Vector of `Analysis` objects. Our parser produces only one analysis for the toekn "score".


::: {.callout-warning title="Out of date"}
The signature with the optional data parameter is out of date
and will be removed in the next release.
:::



```{julia}
scoreparses = parsetoken("score", parser)
length(scoreparses)
```
```{julia}
typeof(scoreparses[1])
```

The analysis object associates with the token a URN value, in abbreviated format, for each of the four properties of an analysis.

```{julia}
scoreparses[1].token

```

```{julia}
scoreparses[1].form
```

`NN` is the Penn Tree Bank code for *Noun, singular or mass*.

We can also parse a list of words. Here, parsing four words produces a Vector containing four Vectors of `Analysis` objects.

```{julia}
wordsparsed = parselist(split("Four score and seven"), parser)
length(wordsparsed)
```


:::{.callout-tip title="Tip for parsing a citable corpus"}
You can use an `OrthographicSystem` to create generate a list of unique lexical tokens for an entire citable corpus. See the documentation for [the `Orthography.jl` package](https://neelsmith.quarto.pub/orthography/)  with [this tutorial](https://neelsmith.quarto.pub/orthography/tutorials/corpora.html/).
:::

