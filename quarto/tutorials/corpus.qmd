---
title: "Analyzing a corpus"
---

The `CitableParserBuilder` defines a number of functions that draw on a concrete implementation of the `parsetoken` function to analyze a citable corpus.

We'll load a citable corpus from a file in this repository's `test/data` directory (referred to here as `f`).


```{julia}
#| warning: false
using CitableParserBuilder
using CitableCorpus, CitableBase
corpusurl = "https://raw.githubusercontent.com/neelsmith/CitableParserBuilder.jl/main/test/data/gettysburgcorpus.cex"
corpus = fromcex(corpusurl, CitableTextCorpus, UrlReader)
```

We'll use the `SimpleAscii` orthography from the `Orthography` package to prepare a tokenized corpus.

```{julia}
using Orthography
tc = tokenizedcorpus(corpus, simpleAscii())
```


We'll build a `GettysburgParser`, a demo parser for the English text of the Gettysburg Address in two steps.  First we'll load a local file with analytical data into a dictionary (here named `morphdict`). Then we'll include that as an optional `dict` parameter when we build the parser.

The result of parsing the corpus is a Vector of `AnalyzedToken`s.  There is one entry for each token in the corpus.
```{julia}
repo = pwd() |> dirname |> dirname
```

```{julia}
#| warning: false
using CitableParserBuilder
parser = CitableParserBuilder.gettysburgParser(repo)
parsed =  parsecorpus(tc, parser; data = parser.data)
length(parsed)
```

The vector of analyses can be formatted as delimited text with the `delimited` function.  If you include an optional `registry` mapping collection names to full CITE2 collection strings, abbreviated URNs will be expanded in the resulting text.


```{julia}
urndict = Dict(
    "gburglex" => "urn:cite2:citedemo:gburglex.v1:",
    "pennpos"  => "urn:cite2:citedemo:pennpos.v1:",
    "gburgrule" => "urn:cite2:citedemo:gburgrule.v1:",
    "gburgstem" => "urn:cite2:citedemo:gburgstem.v1:"
)

textoutput = cex(parsed; registry = urndict)
```


```{julia}
delimited_output = tempname()
open(delimited_output, "w") do io
    write(io, textoutput)
end
delimited_output
```

We can read the file to create a new Vector of analyses.

```{julia}
fromcex(delimited_output, AnalyzedTokenCollection, FileReader)
```


(We'll be tidy and remove the temporary file.) 

```
rm(delimited_output)
```


