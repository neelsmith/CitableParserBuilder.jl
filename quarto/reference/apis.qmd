---
title: "API documentation"
---

## Types




`AbbreviatedUrn` 

:::{.callout-note appearance="minimal"}
```{julia}
#| echo: false
#| warning: false
using CitableParserBuilder
@doc AbbreviatedUrn
```
:::


`Stem`


:::{.callout-note appearance="minimal"}
```{julia}
#| echo: false
#| warning: false
@doc Stem
```
:::


`Rule`

:::{.callout-note appearance="minimal"}
```{julia}
#| echo: false
#| warning: false
@doc Rule
```
:::


`Analysis`

:::{.callout-note appearance="minimal"}
```{julia}
#| echo: false
#| warning: false
@doc Analysis
```
:::

`StemUrn`

:::{.callout-note appearance="minimal"}
```{julia}
#| echo: false
#| warning: false
@doc StemUrn
```
:::

`RuleUrn`

:::{.callout-note appearance="minimal"}
```{julia}
#| echo: false
#| warning: false
@doc RuleUrn
```
:::

`LexemeUrn`

:::{.callout-note appearance="minimal"}
```{julia}
#| echo: false
#| warning: false
@doc LexemeUrn
```
:::

`FormUrn`

:::{.callout-note appearance="minimal"}
```{julia}
#| echo: false
#| warning: false
@doc FormUrn
```
:::

`AnalyzedToken`

:::{.callout-note appearance="minimal"}
```{julia}
#| echo: false
#| warning: false
@doc AnalyzedToken
```
:::


## Parsing

`parsetoken`

:::{.callout-note appearance="minimal"}
```{julia}
#| echo: false
#| warning: false
@doc parsetoken
```
:::



parsepassage
parsecorpus




## Working with vectors of `AnalyzedToken`s

```@docs
lexemes
stringsforlexeme
lexemedictionary
```

## Working with `AbbreviatedUrn`s

```@docs
abbreviate
expand
fstsafe
```

## Working with `Stem`s and `Rule`s

```@docs
CitableParserBuilder.lexeme
CitableParserBuilder.id
CitableParserBuilder.inflectiontype
```

## Serialization

```@docs
readfst
relationsblock
delimited
cex
```

